//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50630.0
// 
namespace PlantATree.TreeService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tree", Namespace="http://schemas.datacontract.org/2004/07/PlantATree.Web", IsReference=true)]
    public partial class Tree : PlantATree.TreeService.EntityObject {
        
        private System.Nullable<decimal> CoordinateXField;
        
        private System.Nullable<decimal> CoordinateYField;
        
        private System.Nullable<decimal> CoordinateZField;
        
        private System.Nullable<System.DateTime> CreationDateField;
        
        private string CreatorEmailField;
        
        private string CreatorNameField;
        
        private string MessageField;
        
        private int TreeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> CoordinateX {
            get {
                return this.CoordinateXField;
            }
            set {
                if ((this.CoordinateXField.Equals(value) != true)) {
                    this.CoordinateXField = value;
                    this.RaisePropertyChanged("CoordinateX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> CoordinateY {
            get {
                return this.CoordinateYField;
            }
            set {
                if ((this.CoordinateYField.Equals(value) != true)) {
                    this.CoordinateYField = value;
                    this.RaisePropertyChanged("CoordinateY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> CoordinateZ {
            get {
                return this.CoordinateZField;
            }
            set {
                if ((this.CoordinateZField.Equals(value) != true)) {
                    this.CoordinateZField = value;
                    this.RaisePropertyChanged("CoordinateZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorEmail {
            get {
                return this.CreatorEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorEmailField, value) != true)) {
                    this.CreatorEmailField = value;
                    this.RaisePropertyChanged("CreatorEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatorName {
            get {
                return this.CreatorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorNameField, value) != true)) {
                    this.CreatorNameField = value;
                    this.RaisePropertyChanged("CreatorName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TreeId {
            get {
                return this.TreeIdField;
            }
            set {
                if ((this.TreeIdField.Equals(value) != true)) {
                    this.TreeIdField = value;
                    this.RaisePropertyChanged("TreeId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructuralObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.Tree))]
    public partial class StructuralObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityObject", Namespace="http://schemas.datacontract.org/2004/07/System.Data.Objects.DataClasses", IsReference=true)]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.Tree))]
    public partial class EntityObject : PlantATree.TreeService.StructuralObject {
        
        private PlantATree.TreeService.EntityKey EntityKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PlantATree.TreeService.EntityKey EntityKey {
            get {
                return this.EntityKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyField, value) != true)) {
                    this.EntityKeyField = value;
                    this.RaisePropertyChanged("EntityKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKey", Namespace="http://schemas.datacontract.org/2004/07/System.Data", IsReference=true)]
    public partial class EntityKey : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EntityContainerNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.EntityKeyMember> EntityKeyValuesField;
        
        private string EntitySetNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityContainerName {
            get {
                return this.EntityContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityContainerNameField, value) != true)) {
                    this.EntityContainerNameField = value;
                    this.RaisePropertyChanged("EntityContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.EntityKeyMember> EntityKeyValues {
            get {
                return this.EntityKeyValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityKeyValuesField, value) != true)) {
                    this.EntityKeyValuesField = value;
                    this.RaisePropertyChanged("EntityKeyValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntitySetName {
            get {
                return this.EntitySetNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntitySetNameField, value) != true)) {
                    this.EntitySetNameField = value;
                    this.RaisePropertyChanged("EntitySetName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityKeyMember", Namespace="http://schemas.datacontract.org/2004/07/System.Data")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.EntityObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.StructuralObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.EntityKey))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.EntityKeyMember>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PlantATree.TreeService.Tree))]
    public partial class EntityKeyMember : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyField;
        
        private object ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TreeService.ITreeService")]
    public interface ITreeService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITreeService/GetTrees", ReplyAction="http://tempuri.org/ITreeService/GetTreesResponse")]
        System.IAsyncResult BeginGetTrees(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree> EndGetTrees(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITreeService/InsertTree", ReplyAction="http://tempuri.org/ITreeService/InsertTreeResponse")]
        System.IAsyncResult BeginInsertTree(PlantATree.TreeService.Tree newTree, System.AsyncCallback callback, object asyncState);
        
        int EndInsertTree(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITreeService/GetTreesCount", ReplyAction="http://tempuri.org/ITreeService/GetTreesCountResponse")]
        System.IAsyncResult BeginGetTreesCount(System.AsyncCallback callback, object asyncState);
        
        int EndGetTreesCount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITreeServiceChannel : PlantATree.TreeService.ITreeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTreesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTreesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTreesCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTreesCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TreeServiceClient : System.ServiceModel.ClientBase<PlantATree.TreeService.ITreeService>, PlantATree.TreeService.ITreeService {
        
        private BeginOperationDelegate onBeginGetTreesDelegate;
        
        private EndOperationDelegate onEndGetTreesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTreesCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertTreeDelegate;
        
        private EndOperationDelegate onEndInsertTreeDelegate;
        
        private System.Threading.SendOrPostCallback onInsertTreeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTreesCountDelegate;
        
        private EndOperationDelegate onEndGetTreesCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetTreesCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TreeServiceClient() {
        }
        
        public TreeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TreeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TreeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TreeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetTreesCompletedEventArgs> GetTreesCompleted;
        
        public event System.EventHandler<InsertTreeCompletedEventArgs> InsertTreeCompleted;
        
        public event System.EventHandler<GetTreesCountCompletedEventArgs> GetTreesCountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlantATree.TreeService.ITreeService.BeginGetTrees(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrees(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree> PlantATree.TreeService.ITreeService.EndGetTrees(System.IAsyncResult result) {
            return base.Channel.EndGetTrees(result);
        }
        
        private System.IAsyncResult OnBeginGetTrees(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PlantATree.TreeService.ITreeService)(this)).BeginGetTrees(callback, asyncState);
        }
        
        private object[] OnEndGetTrees(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree> retVal = ((PlantATree.TreeService.ITreeService)(this)).EndGetTrees(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTreesCompleted(object state) {
            if ((this.GetTreesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTreesCompleted(this, new GetTreesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTreesAsync() {
            this.GetTreesAsync(null);
        }
        
        public void GetTreesAsync(object userState) {
            if ((this.onBeginGetTreesDelegate == null)) {
                this.onBeginGetTreesDelegate = new BeginOperationDelegate(this.OnBeginGetTrees);
            }
            if ((this.onEndGetTreesDelegate == null)) {
                this.onEndGetTreesDelegate = new EndOperationDelegate(this.OnEndGetTrees);
            }
            if ((this.onGetTreesCompletedDelegate == null)) {
                this.onGetTreesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTreesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTreesDelegate, null, this.onEndGetTreesDelegate, this.onGetTreesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlantATree.TreeService.ITreeService.BeginInsertTree(PlantATree.TreeService.Tree newTree, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertTree(newTree, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int PlantATree.TreeService.ITreeService.EndInsertTree(System.IAsyncResult result) {
            return base.Channel.EndInsertTree(result);
        }
        
        private System.IAsyncResult OnBeginInsertTree(object[] inValues, System.AsyncCallback callback, object asyncState) {
            PlantATree.TreeService.Tree newTree = ((PlantATree.TreeService.Tree)(inValues[0]));
            return ((PlantATree.TreeService.ITreeService)(this)).BeginInsertTree(newTree, callback, asyncState);
        }
        
        private object[] OnEndInsertTree(System.IAsyncResult result) {
            int retVal = ((PlantATree.TreeService.ITreeService)(this)).EndInsertTree(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertTreeCompleted(object state) {
            if ((this.InsertTreeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertTreeCompleted(this, new InsertTreeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertTreeAsync(PlantATree.TreeService.Tree newTree) {
            this.InsertTreeAsync(newTree, null);
        }
        
        public void InsertTreeAsync(PlantATree.TreeService.Tree newTree, object userState) {
            if ((this.onBeginInsertTreeDelegate == null)) {
                this.onBeginInsertTreeDelegate = new BeginOperationDelegate(this.OnBeginInsertTree);
            }
            if ((this.onEndInsertTreeDelegate == null)) {
                this.onEndInsertTreeDelegate = new EndOperationDelegate(this.OnEndInsertTree);
            }
            if ((this.onInsertTreeCompletedDelegate == null)) {
                this.onInsertTreeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertTreeCompleted);
            }
            base.InvokeAsync(this.onBeginInsertTreeDelegate, new object[] {
                        newTree}, this.onEndInsertTreeDelegate, this.onInsertTreeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult PlantATree.TreeService.ITreeService.BeginGetTreesCount(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTreesCount(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int PlantATree.TreeService.ITreeService.EndGetTreesCount(System.IAsyncResult result) {
            return base.Channel.EndGetTreesCount(result);
        }
        
        private System.IAsyncResult OnBeginGetTreesCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((PlantATree.TreeService.ITreeService)(this)).BeginGetTreesCount(callback, asyncState);
        }
        
        private object[] OnEndGetTreesCount(System.IAsyncResult result) {
            int retVal = ((PlantATree.TreeService.ITreeService)(this)).EndGetTreesCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTreesCountCompleted(object state) {
            if ((this.GetTreesCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTreesCountCompleted(this, new GetTreesCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTreesCountAsync() {
            this.GetTreesCountAsync(null);
        }
        
        public void GetTreesCountAsync(object userState) {
            if ((this.onBeginGetTreesCountDelegate == null)) {
                this.onBeginGetTreesCountDelegate = new BeginOperationDelegate(this.OnBeginGetTreesCount);
            }
            if ((this.onEndGetTreesCountDelegate == null)) {
                this.onEndGetTreesCountDelegate = new EndOperationDelegate(this.OnEndGetTreesCount);
            }
            if ((this.onGetTreesCountCompletedDelegate == null)) {
                this.onGetTreesCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTreesCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetTreesCountDelegate, null, this.onEndGetTreesCountDelegate, this.onGetTreesCountCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override PlantATree.TreeService.ITreeService CreateChannel() {
            return new TreeServiceClientChannel(this);
        }
        
        private class TreeServiceClientChannel : ChannelBase<PlantATree.TreeService.ITreeService>, PlantATree.TreeService.ITreeService {
            
            public TreeServiceClientChannel(System.ServiceModel.ClientBase<PlantATree.TreeService.ITreeService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetTrees(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTrees", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree> EndGetTrees(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree> _result = ((System.Collections.ObjectModel.ObservableCollection<PlantATree.TreeService.Tree>)(base.EndInvoke("GetTrees", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertTree(PlantATree.TreeService.Tree newTree, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = newTree;
                System.IAsyncResult _result = base.BeginInvoke("InsertTree", _args, callback, asyncState);
                return _result;
            }
            
            public int EndInsertTree(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("InsertTree", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTreesCount(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTreesCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetTreesCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetTreesCount", _args, result)));
                return _result;
            }
        }
    }
}
